name: Deploy APP (from PR)

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [main]
    paths: ["app/**", "helm/**"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: deploy-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: app # <-- use your existing Environment
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build and push image (linux/amd64)
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: app/dotnet-demo
          push: true
          platforms: linux/amd64
          provenance: false
          tags: ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - uses: azure/setup-helm@v4

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ env.EKS_CLUSTER_NAME }}" \
            --region "${{ env.AWS_REGION }}"

      - name: Helm upgrade --install
        working-directory: ./helm/dotnet-demo
        run: |
          helm upgrade --install dotnet-demo . \
            --set image.repository=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
            --set image.tag=${{ github.sha }} \
            --set-string 'env[0].name=APP_MESSAGE' --set-string 'env[0].value=${{ env.APP_MESSAGE }}' \
            --set-string 'env[1].name=APP_VERSION' --set-string 'env[1].value=${{ env.APP_VERSION }}' \
            --set-string 'env[2].name=APP_MISSION' --set-string 'env[2].value=${{ env.APP_MISSION }}' \
            --namespace default --create-namespace \
            --wait --timeout 10m

      - name: Get application URL
        id: appurl
        run: |
          for i in {1..20}; do
            APP_URL=$(kubectl get ingress dotnet-demo -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            test -n "$APP_URL" && break
            echo "Waiting for Ingress... ($i/20)"; sleep 15
          done
          test -n "$APP_URL"
          echo "APP_URL=http://$APP_URL" >> $GITHUB_OUTPUT
          echo "SWAGGER=http://$APP_URL/swagger" >> $GITHUB_OUTPUT
          echo "HEALTH=http://$APP_URL/health" >> $GITHUB_OUTPUT
          echo "App URL: http://$APP_URL"
          echo "Swagger: http://$APP_URL/swagger"
          echo "Health:  http://$APP_URL/health"

      - name: Comment details on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const body = `### ðŸš€ Deployed from PR (Environment: app)
            - URL:     ${{ steps.appurl.outputs.APP_URL }}
            - Swagger: ${{ steps.appurl.outputs.SWAGGER }}
            - Health:  ${{ steps.appurl.outputs.HEALTH }}
            - Image:   \`${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}\``;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      # auto-merge baby
      - name: Auto-merge PR (squash)
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: 'squash',
              commit_title: `Deploy succeeded â†’ squash-merge PR #${context.issue.number}`
            })
